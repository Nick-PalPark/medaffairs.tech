name: Sync articles.json from medaffairs-articles

on:
  repository_dispatch:
    types: [medaffairs-articles-updated]
  workflow_dispatch:

permissions:
  contents: write    # allow commit back to this repo

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout site repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure data directory
        run: |
          mkdir -p data
          echo "‚úÖ Data directory ensured"

      - name: Test connection to content repository
        env:
          GITHUB_TOKEN: ${{ secrets.MEDAFFAIRS_ARTICLES_READ_PAT || github.token }}
        run: |
          echo "üîç Testing connection to medaffairs-articles repository..."
          curl -f -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/Nick-PalPark/medaffairs-articles" > /dev/null
          echo "‚úÖ Successfully connected to medaffairs-articles repository"

      - name: Download articles.json (public medaffairs-articles)
        if: ${{ secrets.MEDAFFAIRS_ARTICLES_READ_PAT == '' }}
        run: |
          echo "üì• Downloading articles.json from public repository..."
          curl -fsSL -o data/articles.json \
            https://raw.githubusercontent.com/Nick-PalPark/medaffairs-articles/main/articles.json
          echo "‚úÖ Successfully downloaded articles.json (public access)"

      - name: Download articles.json (private medaffairs-articles)
        if: ${{ secrets.MEDAFFAIRS_ARTICLES_READ_PAT != '' }}
        env:
          READ_PAT: ${{ secrets.MEDAFFAIRS_ARTICLES_READ_PAT }}
        run: |
          echo "üì• Downloading articles.json from private repository..."
          curl -fsSL -H "Authorization: token $READ_PAT" \
            -H "Accept: application/vnd.github.v3.raw" \
            "https://api.github.com/repos/Nick-PalPark/medaffairs-articles/contents/articles.json?ref=main" \
            -o data/articles.json
          echo "‚úÖ Successfully downloaded articles.json (private access)"

      - name: Validate JSON format
        run: |
          echo "üîç Validating JSON format..."
          if ! python3 -m json.tool data/articles.json > /dev/null; then
            echo "‚ùå ERROR: Invalid JSON format in articles.json"
            echo "File contents:"
            cat data/articles.json
            exit 1
          fi
          echo "‚úÖ JSON format is valid"

      - name: Verify file copy success
        run: |
          echo "üîç Verifying file copy..."
          if [ ! -f data/articles.json ]; then
            echo "‚ùå ERROR: articles.json was not copied successfully"
            exit 1
          fi
          file_size=$(stat -c%s data/articles.json)
          if [ "$file_size" -eq 0 ]; then
            echo "‚ùå ERROR: articles.json is empty"
            exit 1
          fi
          echo "‚úÖ File copy successful (size: ${file_size} bytes)"

      - name: Show diff for logging
        run: |
          echo "üìã Changes to be committed:"
          git --no-pager diff --no-color data/articles.json || echo "New file or no changes"

      - name: Commit & push changes if any
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add data/articles.json
            git commit -m "Sync articles.json from medaffairs-articles: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git push
            echo "‚úÖ Pushed updated data/articles.json"
          else
            echo "‚ÑπÔ∏è  No changes to articles.json"
          fi